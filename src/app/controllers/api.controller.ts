import {
  Get,
  Context,
  Delete,
  HttpResponseCreated,
  HttpResponseNoContent,
  HttpResponseNotFound,
  Post,
  HttpResponseOK,
  ValidateBody,
  ValidateParams,
} from '@foal/core';
import { getRepository } from 'typeorm';
import { Todo } from '../entities';

export class ApiController {
  @Get('/todos')
  async getTodos(ctx: Context) {
    const todos = await getRepository(Todo).find({ owner: ctx.user });
    return new HttpResponseOK(todos);
  }

  @Post('/todos')
  @ValidateBody({
    // validation go here
    // check if the todo from user input is a string
    additionalProperties: false,
    properties: {
      // the 'text' property from ctx.request.body should be a string
      text: { type: 'string' },
    },
    // the property text is required
    required: ['text'],
    type: 'object',
  })
  async postTodos(ctx: Context) {
    // create a new todo with the body of HTTP the request
    const todo = new Todo();
    todo.text = ctx.request.body.text;
    // Make the current user the owner of the todo.
    todo.owner = ctx.user;


    // save todo in the db
    await getRepository(Todo).save(todo);

    // Return new todo created with the id generated by the db. The status is 201
    return new HttpResponseCreated(todo);
  }

  @Delete('/todos/:id')
  @ValidateParams({
    properties: {
      // The id should be a number. If it is not (the request.params object
      // always has string properties) the hook tries to convert it to a number
      // before returning a "400 - Bad Request".
      id: { type: 'number' },
    },
    type: 'object',
  })
  async deleteTodos(ctx: Context) {
    // Get the todo with the id given if it exists
    const todo = await getRepository(Todo).findOne({
      id: ctx.request.params.id,
      // Do not return the todo if it does not belong to the current user.
      owner: ctx.user
    });

    // return a 404 for not found if the id doesn't exist
    if (!todo) {
      return new HttpResponseNotFound();
    }

    // remove the todo from the db
    await getRepository(Todo).remove(todo);

    // returns a successful empty response. The status is 204
    return new HttpResponseNoContent();
  }
}
